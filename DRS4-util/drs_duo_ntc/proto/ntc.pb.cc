// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ntc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ntc {
namespace net {

namespace {

const ::google::protobuf::Descriptor* Channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* MotorPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotorPosition_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ntc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ntc_2eproto() {
  protobuf_AddDesc_ntc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ntc.proto");
  GOOGLE_CHECK(file != NULL);
  Channel_descriptor_ = file->message_type(0);
  static const int Channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, boardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, time_),
  };
  Channel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Channel_descriptor_,
      Channel::default_instance_,
      Channel_offsets_,
      -1,
      -1,
      -1,
      sizeof(Channel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _is_default_instance_));
  Event_descriptor_ = file->message_type(1);
  static const int Event_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, channel_),
  };
  Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      -1,
      -1,
      -1,
      sizeof(Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _is_default_instance_));
  MotorPosition_descriptor_ = file->message_type(2);
  static const int MotorPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorPosition, motorpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorPosition, events_),
  };
  MotorPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MotorPosition_descriptor_,
      MotorPosition::default_instance_,
      MotorPosition_offsets_,
      -1,
      -1,
      -1,
      sizeof(MotorPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorPosition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorPosition, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ntc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Channel_descriptor_, &Channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MotorPosition_descriptor_, &MotorPosition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ntc_2eproto() {
  delete Channel::default_instance_;
  delete Channel_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete MotorPosition::default_instance_;
  delete MotorPosition_reflection_;
}

void protobuf_AddDesc_ntc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ntc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tntc.proto\022\007ntc.net\"J\n\007Channel\022\017\n\007chann"
    "el\030\001 \001(\005\022\017\n\007boardId\030\002 \001(\005\022\017\n\007voltage\030\003 \003"
    "(\002\022\014\n\004time\030\004 \003(\002\";\n\005Event\022\017\n\007eventId\030\001 \001"
    "(\005\022!\n\007channel\030\002 \003(\0132\020.ntc.net.Channel\"A\n"
    "\rMotorPosition\022\020\n\010motorPos\030\001 \001(\005\022\036\n\006even"
    "ts\030\002 \003(\0132\016.ntc.net.Eventb\006proto3", 232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ntc.proto", &protobuf_RegisterTypes);
  Channel::default_instance_ = new Channel();
  Event::default_instance_ = new Event();
  MotorPosition::default_instance_ = new MotorPosition();
  Channel::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  MotorPosition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ntc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ntc_2eproto {
  StaticDescriptorInitializer_ntc_2eproto() {
    protobuf_AddDesc_ntc_2eproto();
  }
} static_descriptor_initializer_ntc_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel::kChannelFieldNumber;
const int Channel::kBoardIdFieldNumber;
const int Channel::kVoltageFieldNumber;
const int Channel::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel::Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntc.net.Channel)
}

void Channel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Channel::Channel(const Channel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ntc.net.Channel)
}

void Channel::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  channel_ = 0;
  boardid_ = 0;
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:ntc.net.Channel)
  SharedDtor();
}

void Channel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channel_descriptor_;
}

const Channel& Channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ntc_2eproto();
  return *default_instance_;
}

Channel* Channel::default_instance_ = NULL;

Channel* Channel::New(::google::protobuf::Arena* arena) const {
  Channel* n = new Channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:ntc.net.Channel)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Channel, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Channel*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channel_, boardid_);

#undef ZR_HELPER_
#undef ZR_

  voltage_.Clear();
  time_.Clear();
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ntc.net.Channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_boardId;
        break;
      }

      // optional int32 boardId = 2;
      case 2: {
        if (tag == 16) {
         parse_boardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boardid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_voltage;
        break;
      }

      // repeated float voltage = 3;
      case 3: {
        if (tag == 26) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_voltage())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_voltage())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // repeated float time = 4;
      case 4: {
        if (tag == 34) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_time())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_time())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ntc.net.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ntc.net.Channel)
  return false;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ntc.net.Channel)
  // optional int32 channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // optional int32 boardId = 2;
  if (this->boardid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->boardid(), output);
  }

  // repeated float voltage = 3;
  if (this->voltage_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_voltage_cached_byte_size_);
  }
  for (int i = 0; i < this->voltage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->voltage(i), output);
  }

  // repeated float time = 4;
  if (this->time_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_time_cached_byte_size_);
  }
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->time(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ntc.net.Channel)
}

::google::protobuf::uint8* Channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ntc.net.Channel)
  // optional int32 channel = 1;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // optional int32 boardId = 2;
  if (this->boardid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->boardid(), target);
  }

  // repeated float voltage = 3;
  if (this->voltage_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _voltage_cached_byte_size_, target);
  }
  for (int i = 0; i < this->voltage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->voltage(i), target);
  }

  // repeated float time = 4;
  if (this->time_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _time_cached_byte_size_, target);
  }
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->time(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ntc.net.Channel)
  return target;
}

int Channel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ntc.net.Channel)
  int total_size = 0;

  // optional int32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  // optional int32 boardId = 2;
  if (this->boardid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boardid());
  }

  // repeated float voltage = 3;
  {
    int data_size = 0;
    data_size = 4 * this->voltage_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _voltage_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float time = 4;
  {
    int data_size = 0;
    data_size = 4 * this->time_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _time_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntc.net.Channel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Channel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntc.net.Channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntc.net.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntc.net.Channel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  voltage_.MergeFrom(from.voltage_);
  time_.MergeFrom(from.time_);
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.boardid() != 0) {
    set_boardid(from.boardid());
  }
}

void Channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntc.net.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntc.net.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {

  return true;
}

void Channel::Swap(Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel::InternalSwap(Channel* other) {
  std::swap(channel_, other->channel_);
  std::swap(boardid_, other->boardid_);
  voltage_.UnsafeArenaSwap(&other->voltage_);
  time_.UnsafeArenaSwap(&other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Channel_descriptor_;
  metadata.reflection = Channel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Channel

// optional int32 channel = 1;
void Channel::clear_channel() {
  channel_ = 0;
}
 ::google::protobuf::int32 Channel::channel() const {
  // @@protoc_insertion_point(field_get:ntc.net.Channel.channel)
  return channel_;
}
 void Channel::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:ntc.net.Channel.channel)
}

// optional int32 boardId = 2;
void Channel::clear_boardid() {
  boardid_ = 0;
}
 ::google::protobuf::int32 Channel::boardid() const {
  // @@protoc_insertion_point(field_get:ntc.net.Channel.boardId)
  return boardid_;
}
 void Channel::set_boardid(::google::protobuf::int32 value) {
  
  boardid_ = value;
  // @@protoc_insertion_point(field_set:ntc.net.Channel.boardId)
}

// repeated float voltage = 3;
int Channel::voltage_size() const {
  return voltage_.size();
}
void Channel::clear_voltage() {
  voltage_.Clear();
}
 float Channel::voltage(int index) const {
  // @@protoc_insertion_point(field_get:ntc.net.Channel.voltage)
  return voltage_.Get(index);
}
 void Channel::set_voltage(int index, float value) {
  voltage_.Set(index, value);
  // @@protoc_insertion_point(field_set:ntc.net.Channel.voltage)
}
 void Channel::add_voltage(float value) {
  voltage_.Add(value);
  // @@protoc_insertion_point(field_add:ntc.net.Channel.voltage)
}
 const ::google::protobuf::RepeatedField< float >&
Channel::voltage() const {
  // @@protoc_insertion_point(field_list:ntc.net.Channel.voltage)
  return voltage_;
}
 ::google::protobuf::RepeatedField< float >*
Channel::mutable_voltage() {
  // @@protoc_insertion_point(field_mutable_list:ntc.net.Channel.voltage)
  return &voltage_;
}

// repeated float time = 4;
int Channel::time_size() const {
  return time_.size();
}
void Channel::clear_time() {
  time_.Clear();
}
 float Channel::time(int index) const {
  // @@protoc_insertion_point(field_get:ntc.net.Channel.time)
  return time_.Get(index);
}
 void Channel::set_time(int index, float value) {
  time_.Set(index, value);
  // @@protoc_insertion_point(field_set:ntc.net.Channel.time)
}
 void Channel::add_time(float value) {
  time_.Add(value);
  // @@protoc_insertion_point(field_add:ntc.net.Channel.time)
}
 const ::google::protobuf::RepeatedField< float >&
Channel::time() const {
  // @@protoc_insertion_point(field_list:ntc.net.Channel.time)
  return time_;
}
 ::google::protobuf::RepeatedField< float >*
Channel::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:ntc.net.Channel.time)
  return &time_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kEventIdFieldNumber;
const int Event::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntc.net.Event)
}

void Event::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ntc.net.Event)
}

void Event::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  eventid_ = 0;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:ntc.net.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ntc_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:ntc.net.Event)
  eventid_ = 0;
  channel_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ntc.net.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eventId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel;
        break;
      }

      // repeated .ntc.net.Channel channel = 2;
      case 2: {
        if (tag == 18) {
         parse_channel:
          DO_(input->IncrementRecursionDepth());
         parse_loop_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_channel;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ntc.net.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ntc.net.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ntc.net.Event)
  // optional int32 eventId = 1;
  if (this->eventid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eventid(), output);
  }

  // repeated .ntc.net.Channel channel = 2;
  for (unsigned int i = 0, n = this->channel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->channel(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ntc.net.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ntc.net.Event)
  // optional int32 eventId = 1;
  if (this->eventid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eventid(), target);
  }

  // repeated .ntc.net.Channel channel = 2;
  for (unsigned int i = 0, n = this->channel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->channel(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ntc.net.Event)
  return target;
}

int Event::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ntc.net.Event)
  int total_size = 0;

  // optional int32 eventId = 1;
  if (this->eventid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eventid());
  }

  // repeated .ntc.net.Channel channel = 2;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channel(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntc.net.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntc.net.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntc.net.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntc.net.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  channel_.MergeFrom(from.channel_);
  if (from.eventid() != 0) {
    set_eventid(from.eventid());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntc.net.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntc.net.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  std::swap(eventid_, other->eventid_);
  channel_.UnsafeArenaSwap(&other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional int32 eventId = 1;
void Event::clear_eventid() {
  eventid_ = 0;
}
 ::google::protobuf::int32 Event::eventid() const {
  // @@protoc_insertion_point(field_get:ntc.net.Event.eventId)
  return eventid_;
}
 void Event::set_eventid(::google::protobuf::int32 value) {
  
  eventid_ = value;
  // @@protoc_insertion_point(field_set:ntc.net.Event.eventId)
}

// repeated .ntc.net.Channel channel = 2;
int Event::channel_size() const {
  return channel_.size();
}
void Event::clear_channel() {
  channel_.Clear();
}
const ::ntc::net::Channel& Event::channel(int index) const {
  // @@protoc_insertion_point(field_get:ntc.net.Event.channel)
  return channel_.Get(index);
}
::ntc::net::Channel* Event::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:ntc.net.Event.channel)
  return channel_.Mutable(index);
}
::ntc::net::Channel* Event::add_channel() {
  // @@protoc_insertion_point(field_add:ntc.net.Event.channel)
  return channel_.Add();
}
::google::protobuf::RepeatedPtrField< ::ntc::net::Channel >*
Event::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:ntc.net.Event.channel)
  return &channel_;
}
const ::google::protobuf::RepeatedPtrField< ::ntc::net::Channel >&
Event::channel() const {
  // @@protoc_insertion_point(field_list:ntc.net.Event.channel)
  return channel_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorPosition::kMotorPosFieldNumber;
const int MotorPosition::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorPosition::MotorPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntc.net.MotorPosition)
}

void MotorPosition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MotorPosition::MotorPosition(const MotorPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ntc.net.MotorPosition)
}

void MotorPosition::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  motorpos_ = 0;
}

MotorPosition::~MotorPosition() {
  // @@protoc_insertion_point(destructor:ntc.net.MotorPosition)
  SharedDtor();
}

void MotorPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MotorPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotorPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotorPosition_descriptor_;
}

const MotorPosition& MotorPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ntc_2eproto();
  return *default_instance_;
}

MotorPosition* MotorPosition::default_instance_ = NULL;

MotorPosition* MotorPosition::New(::google::protobuf::Arena* arena) const {
  MotorPosition* n = new MotorPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MotorPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:ntc.net.MotorPosition)
  motorpos_ = 0;
  events_.Clear();
}

bool MotorPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ntc.net.MotorPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 motorPos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motorpos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_events;
        break;
      }

      // repeated .ntc.net.Event events = 2;
      case 2: {
        if (tag == 18) {
         parse_events:
          DO_(input->IncrementRecursionDepth());
         parse_loop_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ntc.net.MotorPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ntc.net.MotorPosition)
  return false;
#undef DO_
}

void MotorPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ntc.net.MotorPosition)
  // optional int32 motorPos = 1;
  if (this->motorpos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->motorpos(), output);
  }

  // repeated .ntc.net.Event events = 2;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->events(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ntc.net.MotorPosition)
}

::google::protobuf::uint8* MotorPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ntc.net.MotorPosition)
  // optional int32 motorPos = 1;
  if (this->motorpos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->motorpos(), target);
  }

  // repeated .ntc.net.Event events = 2;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->events(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ntc.net.MotorPosition)
  return target;
}

int MotorPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ntc.net.MotorPosition)
  int total_size = 0;

  // optional int32 motorPos = 1;
  if (this->motorpos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->motorpos());
  }

  // repeated .ntc.net.Event events = 2;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotorPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntc.net.MotorPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MotorPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MotorPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntc.net.MotorPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntc.net.MotorPosition)
    MergeFrom(*source);
  }
}

void MotorPosition::MergeFrom(const MotorPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntc.net.MotorPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  events_.MergeFrom(from.events_);
  if (from.motorpos() != 0) {
    set_motorpos(from.motorpos());
  }
}

void MotorPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntc.net.MotorPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorPosition::CopyFrom(const MotorPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntc.net.MotorPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorPosition::IsInitialized() const {

  return true;
}

void MotorPosition::Swap(MotorPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorPosition::InternalSwap(MotorPosition* other) {
  std::swap(motorpos_, other->motorpos_);
  events_.UnsafeArenaSwap(&other->events_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MotorPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotorPosition_descriptor_;
  metadata.reflection = MotorPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MotorPosition

// optional int32 motorPos = 1;
void MotorPosition::clear_motorpos() {
  motorpos_ = 0;
}
 ::google::protobuf::int32 MotorPosition::motorpos() const {
  // @@protoc_insertion_point(field_get:ntc.net.MotorPosition.motorPos)
  return motorpos_;
}
 void MotorPosition::set_motorpos(::google::protobuf::int32 value) {
  
  motorpos_ = value;
  // @@protoc_insertion_point(field_set:ntc.net.MotorPosition.motorPos)
}

// repeated .ntc.net.Event events = 2;
int MotorPosition::events_size() const {
  return events_.size();
}
void MotorPosition::clear_events() {
  events_.Clear();
}
const ::ntc::net::Event& MotorPosition::events(int index) const {
  // @@protoc_insertion_point(field_get:ntc.net.MotorPosition.events)
  return events_.Get(index);
}
::ntc::net::Event* MotorPosition::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:ntc.net.MotorPosition.events)
  return events_.Mutable(index);
}
::ntc::net::Event* MotorPosition::add_events() {
  // @@protoc_insertion_point(field_add:ntc.net.MotorPosition.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::ntc::net::Event >*
MotorPosition::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:ntc.net.MotorPosition.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::ntc::net::Event >&
MotorPosition::events() const {
  // @@protoc_insertion_point(field_list:ntc.net.MotorPosition.events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace net
}  // namespace ntc

// @@protoc_insertion_point(global_scope)
