// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntc.proto

#ifndef PROTOBUF_ntc_2eproto__INCLUDED
#define PROTOBUF_ntc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ntc {
namespace net {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ntc_2eproto();
void protobuf_AssignDesc_ntc_2eproto();
void protobuf_ShutdownFile_ntc_2eproto();

class Channel;
class Event;
class MotorPosition;

// ===================================================================

class Channel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ntc.net.Channel) */ {
 public:
  Channel();
  virtual ~Channel();

  Channel(const Channel& from);

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Channel& default_instance();

  void Swap(Channel* other);

  // implements Message ----------------------------------------------

  inline Channel* New() const { return New(NULL); }

  Channel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Channel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // optional int32 boardId = 2;
  void clear_boardid();
  static const int kBoardIdFieldNumber = 2;
  ::google::protobuf::int32 boardid() const;
  void set_boardid(::google::protobuf::int32 value);

  // repeated float voltage = 3;
  int voltage_size() const;
  void clear_voltage();
  static const int kVoltageFieldNumber = 3;
  float voltage(int index) const;
  void set_voltage(int index, float value);
  void add_voltage(float value);
  const ::google::protobuf::RepeatedField< float >&
      voltage() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_voltage();

  // repeated float time = 4;
  int time_size() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  float time(int index) const;
  void set_time(int index, float value);
  void add_time(float value);
  const ::google::protobuf::RepeatedField< float >&
      time() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_time();

  // @@protoc_insertion_point(class_scope:ntc.net.Channel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 boardid_;
  ::google::protobuf::RepeatedField< float > voltage_;
  mutable int _voltage_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > time_;
  mutable int _time_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ntc_2eproto();
  friend void protobuf_AssignDesc_ntc_2eproto();
  friend void protobuf_ShutdownFile_ntc_2eproto();

  void InitAsDefaultInstance();
  static Channel* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ntc.net.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  inline Event* New() const { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eventId = 1;
  void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  ::google::protobuf::int32 eventid() const;
  void set_eventid(::google::protobuf::int32 value);

  // repeated .ntc.net.Channel channel = 2;
  int channel_size() const;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::ntc::net::Channel& channel(int index) const;
  ::ntc::net::Channel* mutable_channel(int index);
  ::ntc::net::Channel* add_channel();
  ::google::protobuf::RepeatedPtrField< ::ntc::net::Channel >*
      mutable_channel();
  const ::google::protobuf::RepeatedPtrField< ::ntc::net::Channel >&
      channel() const;

  // @@protoc_insertion_point(class_scope:ntc.net.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ntc::net::Channel > channel_;
  ::google::protobuf::int32 eventid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ntc_2eproto();
  friend void protobuf_AssignDesc_ntc_2eproto();
  friend void protobuf_ShutdownFile_ntc_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// -------------------------------------------------------------------

class MotorPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ntc.net.MotorPosition) */ {
 public:
  MotorPosition();
  virtual ~MotorPosition();

  MotorPosition(const MotorPosition& from);

  inline MotorPosition& operator=(const MotorPosition& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotorPosition& default_instance();

  void Swap(MotorPosition* other);

  // implements Message ----------------------------------------------

  inline MotorPosition* New() const { return New(NULL); }

  MotorPosition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotorPosition& from);
  void MergeFrom(const MotorPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MotorPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 motorPos = 1;
  void clear_motorpos();
  static const int kMotorPosFieldNumber = 1;
  ::google::protobuf::int32 motorpos() const;
  void set_motorpos(::google::protobuf::int32 value);

  // repeated .ntc.net.Event events = 2;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 2;
  const ::ntc::net::Event& events(int index) const;
  ::ntc::net::Event* mutable_events(int index);
  ::ntc::net::Event* add_events();
  ::google::protobuf::RepeatedPtrField< ::ntc::net::Event >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::ntc::net::Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:ntc.net.MotorPosition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ntc::net::Event > events_;
  ::google::protobuf::int32 motorpos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ntc_2eproto();
  friend void protobuf_AssignDesc_ntc_2eproto();
  friend void protobuf_ShutdownFile_ntc_2eproto();

  void InitAsDefaultInstance();
  static MotorPosition* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Channel

// optional int32 channel = 1;
inline void Channel::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 Channel::channel() const {
  // @@protoc_insertion_point(field_get:ntc.net.Channel.channel)
  return channel_;
}
inline void Channel::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:ntc.net.Channel.channel)
}

// optional int32 boardId = 2;
inline void Channel::clear_boardid() {
  boardid_ = 0;
}
inline ::google::protobuf::int32 Channel::boardid() const {
  // @@protoc_insertion_point(field_get:ntc.net.Channel.boardId)
  return boardid_;
}
inline void Channel::set_boardid(::google::protobuf::int32 value) {
  
  boardid_ = value;
  // @@protoc_insertion_point(field_set:ntc.net.Channel.boardId)
}

// repeated float voltage = 3;
inline int Channel::voltage_size() const {
  return voltage_.size();
}
inline void Channel::clear_voltage() {
  voltage_.Clear();
}
inline float Channel::voltage(int index) const {
  // @@protoc_insertion_point(field_get:ntc.net.Channel.voltage)
  return voltage_.Get(index);
}
inline void Channel::set_voltage(int index, float value) {
  voltage_.Set(index, value);
  // @@protoc_insertion_point(field_set:ntc.net.Channel.voltage)
}
inline void Channel::add_voltage(float value) {
  voltage_.Add(value);
  // @@protoc_insertion_point(field_add:ntc.net.Channel.voltage)
}
inline const ::google::protobuf::RepeatedField< float >&
Channel::voltage() const {
  // @@protoc_insertion_point(field_list:ntc.net.Channel.voltage)
  return voltage_;
}
inline ::google::protobuf::RepeatedField< float >*
Channel::mutable_voltage() {
  // @@protoc_insertion_point(field_mutable_list:ntc.net.Channel.voltage)
  return &voltage_;
}

// repeated float time = 4;
inline int Channel::time_size() const {
  return time_.size();
}
inline void Channel::clear_time() {
  time_.Clear();
}
inline float Channel::time(int index) const {
  // @@protoc_insertion_point(field_get:ntc.net.Channel.time)
  return time_.Get(index);
}
inline void Channel::set_time(int index, float value) {
  time_.Set(index, value);
  // @@protoc_insertion_point(field_set:ntc.net.Channel.time)
}
inline void Channel::add_time(float value) {
  time_.Add(value);
  // @@protoc_insertion_point(field_add:ntc.net.Channel.time)
}
inline const ::google::protobuf::RepeatedField< float >&
Channel::time() const {
  // @@protoc_insertion_point(field_list:ntc.net.Channel.time)
  return time_;
}
inline ::google::protobuf::RepeatedField< float >*
Channel::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:ntc.net.Channel.time)
  return &time_;
}

// -------------------------------------------------------------------

// Event

// optional int32 eventId = 1;
inline void Event::clear_eventid() {
  eventid_ = 0;
}
inline ::google::protobuf::int32 Event::eventid() const {
  // @@protoc_insertion_point(field_get:ntc.net.Event.eventId)
  return eventid_;
}
inline void Event::set_eventid(::google::protobuf::int32 value) {
  
  eventid_ = value;
  // @@protoc_insertion_point(field_set:ntc.net.Event.eventId)
}

// repeated .ntc.net.Channel channel = 2;
inline int Event::channel_size() const {
  return channel_.size();
}
inline void Event::clear_channel() {
  channel_.Clear();
}
inline const ::ntc::net::Channel& Event::channel(int index) const {
  // @@protoc_insertion_point(field_get:ntc.net.Event.channel)
  return channel_.Get(index);
}
inline ::ntc::net::Channel* Event::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:ntc.net.Event.channel)
  return channel_.Mutable(index);
}
inline ::ntc::net::Channel* Event::add_channel() {
  // @@protoc_insertion_point(field_add:ntc.net.Event.channel)
  return channel_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ntc::net::Channel >*
Event::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:ntc.net.Event.channel)
  return &channel_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ntc::net::Channel >&
Event::channel() const {
  // @@protoc_insertion_point(field_list:ntc.net.Event.channel)
  return channel_;
}

// -------------------------------------------------------------------

// MotorPosition

// optional int32 motorPos = 1;
inline void MotorPosition::clear_motorpos() {
  motorpos_ = 0;
}
inline ::google::protobuf::int32 MotorPosition::motorpos() const {
  // @@protoc_insertion_point(field_get:ntc.net.MotorPosition.motorPos)
  return motorpos_;
}
inline void MotorPosition::set_motorpos(::google::protobuf::int32 value) {
  
  motorpos_ = value;
  // @@protoc_insertion_point(field_set:ntc.net.MotorPosition.motorPos)
}

// repeated .ntc.net.Event events = 2;
inline int MotorPosition::events_size() const {
  return events_.size();
}
inline void MotorPosition::clear_events() {
  events_.Clear();
}
inline const ::ntc::net::Event& MotorPosition::events(int index) const {
  // @@protoc_insertion_point(field_get:ntc.net.MotorPosition.events)
  return events_.Get(index);
}
inline ::ntc::net::Event* MotorPosition::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:ntc.net.MotorPosition.events)
  return events_.Mutable(index);
}
inline ::ntc::net::Event* MotorPosition::add_events() {
  // @@protoc_insertion_point(field_add:ntc.net.MotorPosition.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ntc::net::Event >*
MotorPosition::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:ntc.net.MotorPosition.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ntc::net::Event >&
MotorPosition::events() const {
  // @@protoc_insertion_point(field_list:ntc.net.MotorPosition.events)
  return events_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace net
}  // namespace ntc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ntc_2eproto__INCLUDED
